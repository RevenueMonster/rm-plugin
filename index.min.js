"use strict";

exports.__esModule = true;
exports.default = void 0;

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var portalPostMessage;
var platform = '';
var PLATFORM_MOBILE_APP = 'MOBILE_APP';
var PLATFORM_TERMINAL = 'TERMINAL';
var PLATFORM_WEB_PORTAL = 'WEB_PORTAL'; // sdk code

var rm = {
  getSignedRequest: onPrepareSignedRequest,
  getPlatform: function getPlatform() {
    return platform;
  },
  scanCode: onScanCode,
  showToast: onShowToast,
  showLoading: function showLoading() {
    onToggleLoader(true);
  },
  hideLoading: function hideLoading() {
    onToggleLoader(false);
  },
  showAlert: onShowAlert,
  printReceipt: onPrintReceipt
}; // util for sleep

function sleep(ms) {
  return new Promise(function (resolve) {
    return setTimeout(resolve, ms);
  });
}

function onPrepareSignedRequest(_x) {
  return _onPrepareSignedRequest.apply(this, arguments);
}

function _onPrepareSignedRequest() {
  _onPrepareSignedRequest = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref) {
    var success, fail, signedRequest;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            success = _ref.success, fail = _ref.fail;
            signedRequest = '';

            if (!('revenuemonster' in window)) {
              _context.next = 10;
              break;
            }

            _context.next = 5;
            return sleep(100);

          case 5:
            platform = window.revenuemonster.platform;
            signedRequest = window.revenuemonster.getSignedRequest();
            success({
              signedRequest: signedRequest,
              platform: platform
            });
            _context.next = 20;
            break;

          case 10:
            if (!('signedRequest' in window)) {
              _context.next = 18;
              break;
            }

            _context.next = 13;
            return sleep(100);

          case 13:
            platform = PLATFORM_TERMINAL;
            signedRequest = window.signedRequest.getSignedRequest();
            success({
              signedRequest: signedRequest,
              platform: platform
            });
            _context.next = 20;
            break;

          case 18:
            platform = PLATFORM_WEB_PORTAL;
            window.addEventListener('message', function (event) {
              portalPostMessage = function portalPostMessage(msg) {
                event.source.postMessage(JSON.stringify(msg), event.origin);
              };

              portalPostMessage({
                action: 'FINISH_HANDSHAKE'
              });
              success({
                signedRequest: event.data,
                platform: platform
              });
            }, false);

          case 20:
            return _context.abrupt("return", signedRequest);

          case 21:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _onPrepareSignedRequest.apply(this, arguments);
}

function onScanCode(_ref2) {
  var success = _ref2.success,
      fail = _ref2.fail,
      complete = _ref2.complete;

  switch (platform) {
    case PLATFORM_MOBILE_APP:
      window.ReactNativeWebView.postMessage(JSON.stringify({
        action: 'SCANNER',
        type: 'scanner'
      }));
      var elem = window.revenuemonster.os === 'android' ? document : window;
      elem.addEventListener('message', function (event) {
        var msg = JSON.parse(event.data);

        if (msg.action === 'SCANNER') {
          success({
            code: msg.result
          });
        }
      }, false);
      break;

    case PLATFORM_TERMINAL:
      var code = window.Native.openScanner();
      success({
        code: code
      });
      break;
  }
}

function onToggleLoader(isLoading) {
  switch (platform) {
    case PLATFORM_MOBILE_APP:
      var funcName = 'hide';

      if (isLoading) {
        funcName = 'show';
      }

      window.ReactNativeWebView.postMessage(JSON.stringify({
        action: 'TOGGLE_LOADER',
        type: funcName
      }));
      break;

    case PLATFORM_TERMINAL:
      window.Native.toggleLoader(isLoading);
      break;

    case PLATFORM_WEB_PORTAL:
      portalPostMessage({
        action: 'TOGGLE_LOADER',
        type: isLoading ? 'show' : 'hide'
      });
      break;
  }
}

function onShowToast(_ref3) {
  var title = _ref3.title,
      type = _ref3.type;

  switch (platform) {
    case PLATFORM_MOBILE_APP:
      window.ReactNativeWebView.postMessage(JSON.stringify({
        action: 'SHOW_TOAST',
        message: title
      }));
      break;

    case PLATFORM_TERMINAL:
      window.Native.showToast(message);
      break;

    case PLATFORM_WEB_PORTAL:
      portalPostMessage({
        action: 'SHOW_NOTIFICATION',
        type: type,
        message: title
      });
  }
}

function onShowAlert(_ref4) {
  var _ref4$title = _ref4.title,
      title = _ref4$title === void 0 ? '' : _ref4$title,
      _ref4$type = _ref4.type,
      type = _ref4$type === void 0 ? 'success' : _ref4$type;

  switch (platform) {
    case PLATFORM_MOBILE_APP:
      window.ReactNativeWebView.postMessage(JSON.stringify({
        action: 'MODAL_MESSAGE',
        type: type,
        message: title
      }));
      break;

    case PLATFORM_TERMINAL:
      window.Native.showMessageDialog(title);
      break;
  }
}

function onPrintReceipt(_x2) {
  return _onPrintReceipt.apply(this, arguments);
}

function _onPrintReceipt() {
  _onPrintReceipt = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(_ref5) {
    var data, messageStr;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            data = _ref5.data;
            _context2.t0 = platform;
            _context2.next = _context2.t0 === PLATFORM_TERMINAL ? 4 : 8;
            break;

          case 4:
            messageStr = JSON.stringify(data);
            _context2.next = 7;
            return window.Native.printReceipt(messageStr);

          case 7:
            return _context2.abrupt("break", 8);

          case 8:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _onPrintReceipt.apply(this, arguments);
}

var _default = {
  getSignedRequest: onPrepareSignedRequest,
  getPlatform: function getPlatform() {
    return platform;
  },
  scanCode: onScanCode,
  showToast: onShowToast,
  showLoading: function showLoading() {
    onToggleLoader(true);
  },
  hideLoading: function hideLoading() {
    onToggleLoader(false);
  },
  showAlert: onShowAlert,
  printReceipt: onPrintReceipt,
  PLATFORM_MOBILE_APP: PLATFORM_MOBILE_APP,
  PLATFORM_TERMINAL: PLATFORM_TERMINAL,
  PLATFORM_WEB_PORTAL: PLATFORM_WEB_PORTAL
};
exports.default = _default;